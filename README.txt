Example directory structure:

base_dir
├── experiments
│   └── group_name
│       └── experiment_name
│           ├── data.fastq
│           └── description.yaml
└── targets
    └── locus_name
        ├── manifest.yaml
        ├── refs.fasta
        ├── refs.fasta.fai
        └── refs.gff

Input fastqs and processed outputs are kept in base_dir/experiments, which should contain 'group' directories which themselves contain one or more 'experiment' directories.

Each experiment directory should contain a fastq file and 'description.yaml'.

description.yaml must always contain the key-value pair:

	target_info: name of the target (see below)

For a PacBio experiment, it should also contain

    fastq_fn: name of the fastq file (relative to the experiment_name directory, i.e. just the basename)

For a MiSeq experiment, it should contain:
	R1_fn: name of the R1 fastq file (relative to the experiment_name directory, i.e. just the basename)
	R2_fn: name of the R2 fastq file (relative to the experiment_name directory, i.e. just the basename)
    
It can also contain other optional keys describing properties of the experiment:
    cell_line: string
    donor_type: string
    capped: boolean
    cap: string
    replicate: integer
    sorted: boolean

target_info should be the name of a directory in base_dir/targets (e.g. locus_name above) containing descriptions of the sequences used in the experiment.
Nomenclature: 'target' is the genomic locus being targeted, and 'donor' is the exogenous sequence being added.

The required files are:

- a fasta file 'refs.fasta' containing the target sequence, donor sequence, and any suspected contaminants

- an index 'refs.fasta.fai' of this fasta file

- a gff file 'refs.gff' marking various features on these sequences.

    Required features are -
    target: [sgRNA, 5' HA, 3' HA, forward primer, reverse primer]
    donor: [5' HA, 3' HA] (TODO: this is incomplete)

- 'manifest.yaml', with contents

    target: seqname in refs.fasta of target
    donor: seqname in refs.fasta of donor
    sources: list of genbank files from which to generate refs.\*

The fasta, fai, and gff  files can be generated by annotating the target and donor sequences with the required features in benchling, downloading the benchling files in genbank format into the locus_name directory, listing these files in the 'sources' entry in 'manifest.yaml', then running TargetInfo.make_references (TODO: explain).

Once an experiment_name directory containing data and a manifest pointing to a valid target_info directory exists, process the experiment with 

    process_knockin_experiment --base_dir {base_dir} --process group_name experiment_name

If GNU parallel is installed, you can run

    process_knockin_experiment --base_dir {base_dir} --parallel {max_procs}

to process all experiments that exist in base_dir in parallel up to max_procs at a time.

To select only a subset of experiments to process, 

    process_knockin_experiment --base_dir {base_dir} --parallel {max_procs} --condition "yaml here"

where the yaml gives conditions that the optional properties of an experiment need to satisify. (TODO: explain)

After experiments have been processed, to generate a fancy table of outcome counts with figures:
    
    process_knockin_experiment --base_dir {base_dir} --html {file_name.html}

To generate a csv of outcome counts:

    process_knockin_experiment --base_dir {base_dir} --csv {file_name.csv}

Both --html and --csv can be given the same kind of --condition argument to restrict to a subset.