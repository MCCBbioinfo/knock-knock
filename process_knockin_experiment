#!/usr/bin/env python3

import argparse
import subprocess
import sys
from pathlib import Path

import yaml
import pandas as pd
import tqdm

from knockin import experiment, table

def check_blastn():
    no_blastn = False

    try:
        output = subprocess.check_output(['blastn', '-version'])
        if b'2.7.1' not in output:
            no_blastn = True
    except:
        no_blastn = True

    if no_blastn:
        print('blastn 2.7.1 is required and couldn\'t be found')
        sys.exit(0)

def check_parallel():
    print('checking parallel')
    no_parallel = False

    try:
        output = subprocess.check_output(['parallel', '--version'])
        if not output.startswith(b'GNU parallel'):
            no_parallel = True
    except:
        no_parallel = True

    if no_parallel:
        print('GNU parallel is required and couldn\'t be found')
        sys.exit(0)

parser = argparse.ArgumentParser()

parser.add_argument('--base_dir', required=True)
parser.add_argument('--no_progress', action='store_true')

mode_group = parser.add_mutually_exclusive_group(required=True)
mode_group.add_argument('--process', nargs=2, metavar=('GROUP_NAME', 'EXP_NAME'))
mode_group.add_argument('--parallel', metavar='MAX_PROCS')
mode_group.add_argument('--html', metavar='FILE_NAME')
mode_group.add_argument('--csv', metavar='FILE_NAME')

parser.add_argument('--conditions')
parser.add_argument('--drop_outcomes')

args = parser.parse_args()

if args.conditions is None:
    conditions = {}
else:
    conditions = yaml.load(args.conditions)

if args.drop_outcomes is None:
    drop_outcomes = []
else:
    drop_outcomes = yaml.load(args.drop_outcomes)

if args.parallel is not None:
    check_parallel()

    max_procs = args.parallel

    exps = experiment.get_all_experiments(args.base_dir, conditions)

    if len(exps) == 0:
        print('No experiments satify conditions:')
        print(conditions)
        sys.exit(0)

    parallel_command = [
        'parallel',
        '-n', '2', 
        '--verbose',
        '--max-procs', max_procs,
        'process_knockin_experiment',
        '--base_dir', args.base_dir,
        '--no_progress',
        '--process', ':::',
    ]

    arg_pairs = [(e.group, e.name) for e in exps]
    for pair in sorted(arg_pairs):
        parallel_command.extend(pair)
    
    subprocess.check_call(parallel_command)

elif args.process is not None:
    check_blastn()

    group, name = args.process
    if args.no_progress:
        progress = None
    else:
        progress = tqdm.tqdm
        
    data_dir = Path(args.base_dir) / 'data' / group
    sample_sheet_fn = data_dir / 'sample_sheet.yaml'
    sample_sheet = yaml.load(sample_sheet_fn.read_text())
    description = sample_sheet[name]

    if description.get('experiment_type') == 'britt':
        exp_class = experiment.BrittExperiment
    elif description.get('experiment_type') == 'britt_pooled':
        exp_class = experiment.BrittPooledExperiment
    elif description.get('experiment_type') == 'britt_amplicon':
        exp_class = experiment.BrittAmpliconExperiment
    elif description.get('experiment_type') == 'jin':
        exp_class = experiment.JinExperiment
    else:
        exp_class = experiment.Experiment

    exp = exp_class(args.base_dir, group, name, description, progress)

    exp.process()

elif args.html:
    table.generate_html(args.base_dir, args.html, conditions, drop_outcomes)

elif args.csv:
    df = table.load_counts(args.base_dir, conditions, drop_outcomes)
    df.to_csv(args.csv)
