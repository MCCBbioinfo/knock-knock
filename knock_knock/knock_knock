#!/usr/bin/env python3.6

import argparse
import subprocess
import sys
import zipfile
from pathlib import Path

import yaml
import pandas as pd
import tqdm

from knock_knock import experiment, table, target_info

def check_blastn():
    no_blastn = False

    try:
        output = subprocess.check_output(['blastn', '-version'])
        if b'2.7.1' not in output:
            no_blastn = True
    except:
        no_blastn = True

    if no_blastn:
        print('blastn 2.7.1 is required and couldn\'t be found')
        sys.exit(0)

def check_parallel():
    no_parallel = False

    try:
        output = subprocess.check_output(['parallel', '--version'])
        if not output.startswith(b'GNU parallel'):
            no_parallel = True
    except:
        no_parallel = True

    if no_parallel:
        print('GNU parallel is required and couldn\'t be found')
        sys.exit(0)

def parallel(args):
    check_parallel()

    exps = experiment.get_all_experiments(args.base_dir, args.conditions)

    if len(exps) == 0:
        print('No experiments satify conditions:')
        print(args.conditions)
        sys.exit(0)

    parallel_command = [
        'parallel',
        '-n', '3', 
        '--bar',
        '--max-procs', str(args.max_procs),
        'knock_knock',
        '--base_dir', str(args.base_dir),
        'process', ':::',
    ]

    arg_tuples = [(exp.group, exp.name, '0') for exp in exps]
    for t in sorted(arg_tuples):
        parallel_command.extend(t)
    
    subprocess.check_call(parallel_command)

def process(args):
    check_blastn()

    data_dir = Path(args.base_dir) / 'data' / args.group
    sample_sheet_fn = data_dir / 'sample_sheet.yaml'
    sample_sheet = yaml.safe_load(sample_sheet_fn.read_text())

    if args.experiment in sample_sheet:
        description = sample_sheet[args.experiment]

        if description.get('platform') == 'pacbio':
            exp_class = experiment.PacbioExperiment
        elif description.get('platform') == 'illumina':
            exp_class = experiment.IlluminaExperiment
        else:
            raise ValueError(description)
    else:
        raise ValueError(args.experiment)

    exp = exp_class(args.base_dir, args.group, args.experiment, description, args.progress)

    exp.process(args.stage)

def make_tables(args):
    drop_outcomes = None

    results_dir = args.base_dir / 'results'
    html_fn = (results_dir / args.file_name_prefix).with_suffix('.html')
    table.generate_html(args.base_dir, html_fn, args.conditions, drop_outcomes, show_subcategories=False)

    html_with_subcategories_fn = (results_dir / f'{args.file_name_prefix}_with_subcategories').with_suffix('.html')
    table.generate_html(args.base_dir, html_with_subcategories_fn, args.conditions, drop_outcomes, show_subcategories=True)

    csv_fn = (results_dir / args.file_name_prefix).with_suffix('.csv')
    df = table.load_counts(args.base_dir, args.conditions, drop_outcomes)
    df.to_csv(csv_fn)

    exps = experiment.get_all_experiments(args.base_dir, args.conditions)

    fns_to_add = [html_fn, html_with_subcategories_fn]
    for exp in exps:
        fns_to_add.append(exp.fns['outcome_browser'])
        for outcome in exp.outcomes:
            outcome_fns = exp.outcome_fns(outcome)
            fns_to_add.append(outcome_fns['diagrams_html'])
            fns_to_add.append(outcome_fns['first_example'])
            for fn in outcome_fns['length_ranges_dir'].iterdir():
                fns_to_add.append(fn)

        categories = set(c for c, s in exp.outcomes)
        for category in categories:
            outcome_fns = exp.outcome_fns(category)
            fns_to_add.append(outcome_fns['diagrams_html'])
            fns_to_add.append(outcome_fns['first_example'])

    zip_fn = (results_dir / args.file_name_prefix).with_suffix('.zip')
    with zipfile.ZipFile(zip_fn, mode='w', compression=zipfile.ZIP_DEFLATED) as zip_fh:
        for fn in fns_to_add:
            zip_fh.write(fn, arcname=fn.relative_to(results_dir))

def build_targets(args):
    target_info.build_target_infos_from_csv(args.base_dir)

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers()

parser_process = subparsers.add_parser('process')
parser_process.add_argument('group')
parser_process.add_argument('experiment')
parser_process.add_argument('stage', type=int, choices=[0, 1])
parser_process.add_argument('--progress', const=tqdm.tqdm, action='store_const')
parser_process.set_defaults(func=process)

parser_parallel = subparsers.add_parser('parallel')
parser_parallel.add_argument('max_procs', type=int)
parser_parallel.add_argument('--conditions', type=yaml.safe_load, default={})
parser_parallel.set_defaults(func=parallel)

parser_table = subparsers.add_parser('table')
parser_table.add_argument('file_name_prefix')
parser_table.add_argument('--conditions', type=yaml.safe_load, default={})
parser_table.set_defaults(func=make_tables)

parser_targets = subparsers.add_parser('build_targets')
parser_targets.set_defaults(func=build_targets)

parser.add_argument('--base_dir', type=Path, required=True)
args = parser.parse_args()
args.func(args)
